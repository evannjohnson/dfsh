#!/bin/bash

set -eEuo pipefail
# set -x
trap 'echo "Error occurred at line $LINENO"' ERR

DEBUG=""
# DFSH_REPO="$HOME/.cfg"
# DFSH_WORK="$HOME/sandbox/dotfiles-repo"
# DFSH_REPO="$HOME/sandbox/dotfiles-repo/.git"
# DFSH_WORK="$HOME/sandbox/dotfiles-repo"
SCRIPT_DIR="$(cd -- "$(dirname -- "$0")" && pwd)"
# DFSH_REPO="${DFSH_REPO:-$SCRIPT_DIR/test/test-env/.dotfiles}"
# DFSH_WORK="${DFSH_WORK:-$SCRIPT_DIR/test/test-env}"
DFSH_REPO="${DFSH_REPO:-$HOME/.dotfiles}"
DFSH_WORK="${DFSH_WORK:-$HOME}"
MAIN_BRANCH="main"
GIT_PROGRAM="git"

R='\033[0;31m'
O='\033[0;33m'
Y='\033[1;33m'
G='\033[0;32m'
B='\033[0;34m'
V='\033[0;35m'
NC='\033[0m' # no color

git_df() {
  require_repo
  # debug "running: $GIT_PROGRAM --git-dir=\"$DFSH_REPO\" --work-tree=\"$DFSH_WORK\" $*"
  _git "$@"
}

_git() {
  "$GIT_PROGRAM" --git-dir="$DFSH_REPO" --work-tree="$DFSH_WORK" "$@"
}

debug() {
  if [ -n "$DEBUG" ];
  then
    printf 'DEBUG: %b\n' "$*"
  fi
}

require_repo() {
  [ -d "$DFSH_REPO" ] || error_exit "Git repo at '$DFSH_REPO' does not exist"
}

require_git() {
  command -v "$GIT_PROGRAM" &>/dev/null ||
    error_exit "Git cannot be located by invoking '$GIT_PROGRAM'"
}

qualify_path() {
  local path="$1"
  if [ -z "$path" ]; then
      error_exit "You can't specify an empty $2 path"
  fi

  if [ "$path" = "." ]; then
      path="$PWD"
  elif [[ "$path" != /* ]]; then
      path="$PWD/${path#./}"
  fi
  echo "$path"
}

error_exit() {
  printf 'Error: %b\n' "$*" >&2
  exit 1
}

commit() {
  current_branch="$(git_df rev-parse --abbrev-ref HEAD)"

  if [ -z "${FORCE:-}" ]; then
    # stop_if_on_main
    # ensure_up_to_date
    # ensure_based_on_main "$current_branch"
    true
  fi

  git_df commit "$@"
}

commitm() {
  echo "not implemented"
}

pushm() {
  echo "not implemented"
}

clone() {
  "$GIT_PROGRAM" clone --bare "$@" "$DFSH_REPO"
  configure_repo
  # set up remote tracking branches
  git_df fetch
}

status() {
  git_df status ${@:+"$@"}
  echo

  # check if main is up to date
  local_commit=$(_git rev-parse "$MAIN_BRANCH")
  remote_commit=$(_git rev-parse "origin/$MAIN_BRANCH")

  if [ "$local_commit" = "$remote_commit" ];
  then
    # main up to date with remote, don't do anything
    true
  elif _git merge-base --is-ancestor "$local_commit" "$remote_commit";
  then
    printf "${Y}main${O} is behind ${Y}origin/main${NC}\n"
  elif _git merge-base --is-ancestor "$remote_commit" "$local_commit";
  then
    printf "${Y}main${O} is ahead of ${Y}origin/main${NC}\n"
  else
    printf "${Y}main${O} has diverged with ${Y}origin/main${NC}\n"
  fi

  show_last_fetch_time

  # check if there are any stashes
  if [ -n "$(_git stash list)" ];
  then
    printf "${B}There are dotfiles stashes:${NC}\n"
    git_df stash list
  fi
}

show_last_fetch_time() {
  last_fetch=$(_git reflog show --date=unix origin/HEAD 2>/dev/null | head -1 | grep -o '[0-9]\{10\}') || error_exit "Error getting last fetch time, try running dfsh fetch"

  if [ -z "$last_fetch" ]; then
    echo "No fetch history found or not in a git repository"
    exit 1
  fi

  current_time=$(date +%s)
  diff_seconds=$((current_time - last_fetch))

  weeks=$((diff_seconds / 604800))
  days=$(((diff_seconds % 604800) / 86400))
  hours=$(((diff_seconds % 86400) / 3600))
  minutes=$(((diff_seconds % 3600) / 60))

  if [ $weeks -gt 0 ]; then
    if [ $weeks -gt 1 ]; then
      printf "${R}Last fetch: ${weeks} weeks ago${NC}\n"
    else
      printf "${R}Last fetch: ${weeks} week ago${NC}\n"
    fi
    fetch=1
  elif [ $days -gt 0 ]; then
    if [ $days -gt 1 ]; then
      printf "${O}Last fetch: ${Y}${days}${O} days ago${NC}\n"
    else
      printf "${O}Last fetch: ${Y}${days}${O} day ago${NC}\n"
    fi
    fetch=1
  # elif [ $hours -gt 0 ]; then
  #   if [ $hours -gt 1 ]; then
  #     printf "${O}Last fetch: ${Y}${hours}${O} hours ago${NC}\n"
  #   else
  #     printf "${O}Last fetch: ${Y}${hours}${O} hour ago${NC}\n"
  #   fi
  # else
    # printf "${G}Last fetch: ${minutes} minutes ago${NC}\n"
  fi

  if [ -n "${fetch:-}" ]; then
    git_df fetch
  fi
}

# fast-forward a branch without checking it out
# should error if can't fast-forward
pull_branch() {
  git_df fetch origin
  git_df push "$DFSH_REPO" "origin/$1:$1"
}

configure_repo() {
  # by default, do not show untracked files and directories
  git_df config status.showUntrackedFiles no
  # this is necessary to have remote tracking branches, which I use to check if the local repo is up to date with the remote
  git_df config --local --add remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
}

# demonstrate common control structures
example_command() {
  local -a args

  while [[ $# -gt 0 ]] ; do
    case "$1" in
      --example-flag|-f)
        # do something
      ;;
      *)
        args+=("$1")
      ;;
    esac
    shift
  done

  git_df "${args[@]}"
}

# print tracked files
ls() {
    while [[ $# -gt 0 ]] ; do
    case "$1" in
      --untracked|-u)
        # do something
        git_df ls-files --others --exclude-standard "$(pwd)"
        return
      ;;
      --all|-a)
        # do something
        echo "$(cd "$HOME"; git_df ls-tree -r main --name-only)"
        return
      ;;
      *)
        args+=("$1")
      ;;
    esac
    shift
  done

  git_df ls-tree -r main --name-only
}

ensure_up_to_date() {
  current_branch="$(git_df rev-parse --abbrev-ref HEAD)"

  git_df fetch --quiet origin

  for remote_branch in $(_git branch -r | grep -v '\->'); do
    local_branch=${remote_branch#origin/}

    # ensures that the current branch and main are both up to date
    if [ "$local_branch" = "$MAIN_BRANCH" ] || [ "$local_branch" = "$current_branch" ]; then
      # handle main
      if _git show-ref --quiet refs/heads/"$local_branch"; then
        local_commit=$(_git rev-parse "$local_branch")
        remote_commit=$(_git rev-parse "$remote_branch")

        if [ "$local_commit" != "$remote_commit" ]; then
          error_exit "Local branch '$local_branch' is not up-to-date with '$remote_branch', could be ahead or behind"
        fi
      else
        error_exit "No local branch tracking '$remote_branch'"
      fi
    # elif [ "$local_branch" = "$current_branch" ]; then
        # handle this machine's branch
    # else [ ]; then
    # handle other machine's branches
    fi
  done
}

# $1: the branch to ensure is based on main
ensure_based_on_main() {
  if ! git_df merge-base --is-ancestor "$MAIN_BRANCH" "$1";
  then
    error_exit "Branch $1 is not based on $MAIN_BRANCH, rebase it"
  fi
}

# $1: the branch to rebase onto main
# rebase_onto_main() {

# }

stop_if_on_main() {
  if [ "$(git_df rev-parse --abbrev-ref HEAD)" = "$MAIN_BRANCH" ];
  then
    error_exit "HEAD is on $MAIN_BRANCH, switch to machine branch and try again, or use -F to skip this check
    (ex. dfsh commit -F -m message)"
  fi
}

help() {
  cat <<EOF
help will go here
EOF
  exit
}

# echo replacements
function echo() {
  IFS=' '
  printf '%s\n' "$*"
}

main() {
  require_git

  # BRANCH="$(git_df rev-parse --abbrev-ref HEAD)"

  # parse command line arguments
  local retval=0
  internal_commands="^(commit|commitm|clone|ls|pull-branch|status|help|--help)$"
  if [ -z "$*" ]; then
    # no argumnts will result in help()
    help
  elif [[ "$1" =~ $internal_commands ]]; then
    # for internal commands, process all of the arguments
    DFSH_COMMAND="${1//-/_}"
    DFSH_COMMAND="${DFSH_COMMAND/__/}"
    DFSH_ARGS=()
    shift

    while [[ $# -gt 0 ]] ; do
      key="$1"
      case $key in
        -D)
          DEBUG="YES"
        ;;
        -F) # used by init(), clone() and upgrade()
          FORCE="YES"
        ;;
        -G) # set the git dir
          DFSH_REPO="$(qualify_path "$2" "work tree")"
          shift
        ;;
        -T) # set the work tree
          DFSH_WORK="$(qualify_path "$2" "work tree")"
          shift
        ;;
        *) # any unhandled arguments
          DFSH_ARGS+=("$1")
        ;;
      esac
      shift
    done

    [ ! -d "$DFSH_WORK" ] && error_exit "Work tree does not exist: [$DFSH_WORK]"

    # not using hooks for now
    # HOOK_COMMAND="$DFSH_COMMAND"
    # invoke_hook "pre"

    $DFSH_COMMAND "${DFSH_ARGS[@]:-}"
  else
      # any other commands are simply passed through to git
      git_df "$@"
      retval="$?"
  fi
}

main "$@"
